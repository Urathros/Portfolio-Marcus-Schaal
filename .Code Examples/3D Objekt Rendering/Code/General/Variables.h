#pragma once

#include <d3d11.h>
#include <xnamath.h>


/*****************************************************************************/
// Konstanten
/*****************************************************************************/
const float F_ZERO = 0.0f;
const float F_FULL = 1.0f;
/*****************************************************************************/


/*****************************************************************************/
// Vectoren
/*****************************************************************************/
// 2D-Interger-Vector
/*****************************************************************************/
struct IVector2
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	IVector2() = delete;
	IVector2( int _x, int _y ) : x( _x ), y( _y ) {}
	/*************************************************************************/
	static IVector2 ZeroVector() { return IVector2( 0, 0 ); }
	static IVector2 OneVector() { return IVector2( 1, 1 ); }

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	int x = 0;
	int y = 0;
	/*************************************************************************/
};
/*****************************************************************************/

/*****************************************************************************/
// 2D-Float-Vektor
/*****************************************************************************/
struct FVector2
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	FVector2() = delete;
	FVector2( float _x, float _y ) : x( _x ), y( _y ) {}
	/*************************************************************************/

	static FVector2 ZeroVector() { return FVector2( 0.0f, 0.0f ); }
	static FVector2 OneVector() {  return FVector2( 1.0f, 1.0f ); }

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	float x = 0.0f;
	float y = 0.0f;
	/*************************************************************************/
};
/*****************************************************************************/

/*****************************************************************************/
// 3D-Float-Vector
/*****************************************************************************/
struct FVector3
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	FVector3() = delete;
	FVector3( float _x, float _y, float _z ) : x( _x ), y( _y ), z( _z ) {}
	/*************************************************************************/

	static FVector3 ZeroVector() { return FVector3( 0.0f, 0.0f, 0.0f ); }
	static FVector3 OneVector() { return FVector3( 1.0f, 1.0f, 1.0f ); }

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	float x = 0.0f;
	float y = 0.0f;
	float z = 0.0f;
	/*************************************************************************/
};
/*****************************************************************************/

/*****************************************************************************/
//Windows Float Vector3
/*****************************************************************************/
struct WFVector3
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	WFVector3() = delete;
	WFVector3( float _x, float _y, float _z ) 
		: x( static_cast<FLOAT>( _x ) ), 
		  y( static_cast<FLOAT>( _y ) ), 
		  z( static_cast<FLOAT>( _z ) ) {}
	/*************************************************************************/

	static WFVector3 ZeroVector() 
	{ 
		return WFVector3( static_cast<FLOAT>( 0.0f ), 
						  static_cast<FLOAT>( 0.0f ), 
						  static_cast<FLOAT>( 0.0f ) ); 
	}

	static WFVector3 OneVector() 
	{ 
		return WFVector3( static_cast<FLOAT>( 1.0f ), 
						  static_cast<FLOAT>( 1.0f ), 
						  static_cast<FLOAT>( 1.0f ) ); 
	}

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	FLOAT x = 0.0f;
	FLOAT y = 0.0f;
	FLOAT z = 0.0f;
	/*************************************************************************/
};
/*****************************************************************************/
/*****************************************************************************/



/*****************************************************************************/
// Transform
/*****************************************************************************/
struct Transform
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	Transform() = delete;
	Transform( WFVector3 _pos, WFVector3 _rota, WFVector3 _scale )
		: position( _pos ), rotation( _rota ), scale( _scale ) {}
	/*************************************************************************/

	static Transform ZeroPRS()
	{
		return Transform( WFVector3::ZeroVector(),
						  WFVector3::ZeroVector(),
						  WFVector3::OneVector() );
	}

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	WFVector3 position = WFVector3::ZeroVector();
	WFVector3 rotation = WFVector3::ZeroVector();
	WFVector3 scale	   = WFVector3::OneVector();
	/*************************************************************************/
};
/*****************************************************************************/



/*****************************************************************************/
// Vertex
/*****************************************************************************/
struct Vertex
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	Vertex( 
		//Position
			float _x, float _y = F_ZERO, float _z = F_ZERO, 

		//Farbe
			float _r = F_FULL, float _g = F_FULL, float _b = F_FULL, 
			float _a = F_FULL,

		//UV-Koordinate
			float _u = F_ZERO, float _v = F_ZERO, 
		
		//Normale
			float _normX = F_ZERO, float _normY = F_ZERO, 
			float _normZ = F_ZERO, 

		//Tangente
			float _tanX = F_ZERO, float _tanY = F_ZERO, 
			float _tanZ = F_ZERO, 

		//Binormale
			float _biX = F_ZERO, float _biY = F_ZERO, float _biZ = F_ZERO 
		  )
		: position( _x, _y, _z ), color( _r, _g, _b, _a ), texCoord( _u, _v ), 
		  normal( _normX, _normY, _normZ ), tangent( _tanX, _tanY, _tanZ ), 
		  binormal( _biX, _biY, _biZ ) {}

	Vertex( XMFLOAT3 _pos = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO ),		 //Position
			XMFLOAT4 _col = XMFLOAT4( F_FULL, F_FULL, F_FULL, F_FULL ), //Farbe
			XMFLOAT2 _uv = XMFLOAT2( F_ZERO, F_ZERO ),				       //UV
			XMFLOAT3 _norm = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO ),	  //Normale
			XMFLOAT3 _tan = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO ),		 //Tangente
			XMFLOAT3 _bi = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO )		//Binormale
		  )
		: position( _pos ), color( _col ), texCoord( _uv ), normal( _norm ), 
		  tangent( _tan ), binormal( _bi ) {}
	/*************************************************************************/

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	XMFLOAT3 position = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO );
	XMFLOAT4 color =	XMFLOAT4( F_FULL, F_FULL, F_FULL, F_FULL );
	XMFLOAT2 texCoord = XMFLOAT2( F_ZERO, F_ZERO );
	XMFLOAT3 normal =	XMFLOAT3( F_ZERO, F_ZERO, F_ZERO );
	XMFLOAT3 tangent =	XMFLOAT3( F_ZERO, F_ZERO, F_ZERO );
	XMFLOAT3 binormal = XMFLOAT3( F_ZERO, F_ZERO, F_ZERO );
	/*************************************************************************/
};
/*****************************************************************************/



/*****************************************************************************/
// Licht
/*****************************************************************************/
struct Light 
{
	/*************************************************************************/
	// Konstruktor
	/*************************************************************************/
	Light()
	{
		ZeroMemory( this, sizeof( Light ) );
	}
	/*************************************************************************/

	/*************************************************************************/
	// Variablen
	/*************************************************************************/
	XMFLOAT3 direction;
	FLOAT buffer; 
	XMFLOAT4 ambient; //Grundhelligkeit
	XMFLOAT4 diffuse; //Farbe
	/*************************************************************************/
};
/*****************************************************************************/